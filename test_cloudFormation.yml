Resources:
  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyApiGateway

  MyApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: '{proxy+}'

  MyApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyApiResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations

  MyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - MyApiMethod
    Properties:
      RestApiId: !Ref MyApiGateway
      StageName: prod

  MyApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*'

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: backend-code-bucket
        S3Key: code.zip
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 123
      Role: 'arn:aws:iam::525263168599:role/LabRole'

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: 'users'
      GlobalSecondaryIndexes:
        - IndexName: idIndex
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: emailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  MySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: MySecret
      Description: My secret
      SecretString: '{"jwtsecret": "shubhampatel"}'
      Tags:
        - Key: Environment
          Value: Production

# Security Group allowing HTTPS access through port 3000
  InstanceSecurityGroupPort:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: Allow HTTPS access through port 3000
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 3000
          ToPort: 3000
  
  # Security Group allowing SSH access through port 22
  InstanceSecurityGroupSSH:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: Allow SSH access through port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
  
  # Security Group allowing HTTP access through port 80
  InstanceSecurityGroupHTTP:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: Allow HTTP access through port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80

  # EC2 instance definition
  EC2Instance: 
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.small
      KeyName: mern-login-signup
      ImageId: ami-06e46074ae430fba6
      SecurityGroups: 
        - !Ref InstanceSecurityGroupPort
        - !Ref InstanceSecurityGroupSSH
        - !Ref InstanceSecurityGroupHTTP

      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo su
            yum install git -y
            git clone https://github.com/shubham28102001/mern-login-signup-component-master.git
            cd mern-login-signup-component-master/
            cd client/
            rm .env
            echo "REACT_APP_BACKEND_URL=\"https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod\"" > .env
            yum install nodejs -y
            yum install npm -y
            npm install
            npm run start&
      Tags:
        - Key: Name
          Value: mern-login-signup-application
 
# Outputs after stack creation
Outputs:
  ApplicationURL:
    Description: The URL of the deployed application
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - EC2Instance
          - PublicDnsName
        - ':3000'